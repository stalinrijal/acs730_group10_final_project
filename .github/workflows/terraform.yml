name: Terraform CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag-key:
        description: 'Deployment'
        required: true
        default: 'Deployment'
      tag-value:
        description: 'Ansible'
        required: true
      aws-region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1  # Replace with your desired AWS region

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Replace with your desired Terraform version

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform/

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/
        env:
          TF_VAR_some_variable: ${{ secrets.TF_VAR_SOME_VARIABLE }}  # Replace with any environment variables required by your Terraform configuration

      - name: Terraform Approval
        run: echo "No approval step required"  # You might want to implement a manual approval step or another mechanism for approval
      
      - name: Get EC2 instance public IP by tag
      id: get-ip
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:${{ github.event.inputs.tag-key }},Values=${{ github.event.inputs.tag-value }}" \
          --query "Reservations[].Instances[?State.Name=='running'].[PublicIpAddress]" \
          --output text)
        if [ -z "$PUBLIC_IP" ]; then
          echo "No running instances found with the specified tag."
          exit 1
        fi
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Add IP to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ steps.get-ip.outputs.PUBLIC_IP }} >> ~/.ssh/known_hosts
          echo "Added ${{ steps.get-ip.outputs.PUBLIC_IP }} to known hosts"

      - name: Display known hosts content
        run: cat ~/.ssh/known_hosts
      
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip3 install ansible
          pip3 install boto3

      - name: Download File from S3
        run: |
          mkdir -p ~/images
          aws s3 cp s3://acs730-group10-bucket/images/sample.jpg ~/images/sample.jpg

      - name: Download File from S3
        run: |
          mkdir -p ~/html
          aws s3 cp s3://acs730-group10-bucket/html/index.html ~/html/index.html
      
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/linux.pem
          chmod 400 ~/.ssh/linux.pem
      
      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/aws_ec2.yml ansible/myplaybook.yml -vvvv
        working-directory: ./
